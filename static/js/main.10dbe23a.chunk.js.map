{"version":3,"sources":["Components/Robots/Card.js","Components/Robots/CardList.js","Components/SearchBox/SearchBox.js","Components/Scroll/scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","alt","src","useStyle","makeStyles","theme","root","flexGrow","padding","spacing","paper","textAlign","background","CardList","robots","classes","className","Grid","container","map","user","key","item","xs","Paper","useStyles","margin","textField","width","SearchBox","searchChange","TextField","label","clsx","onChange","scroll","overflowY","border","height","Scroll","props","children","title","fontFamily","color","App","useState","state","setState","search","setSearch","loading","setLoading","fetchMyRobots","a","fetch","res","json","data","useEffect","filteredRobots","filter","robot","toLowerCase","includes","Typography","variant","gutterBottom","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10dbe23a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, username, email }) => {\r\n  return (\r\n    <div>\r\n      <h1>{name}</h1>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <h5>{username}</h5>\r\n      <h5>{email}</h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport { Paper, Grid, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(8),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    background: '#4dd0e1',\r\n  },\r\n}));\r\nconst CardList = ({ robots }) => {\r\n  const classes = useStyle();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        {robots.map((user, key) => {\r\n          return (\r\n            <Grid item xs={3} key={key}>\r\n              <Paper className={classes.paper}>\r\n                <Card\r\n                  id={user.id}\r\n                  name={user.name}\r\n                  username={user.username}\r\n                  email={user.email}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    width: '45ch',\r\n  },\r\n}));\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <TextField\r\n        label='Search'\r\n        id='standard-start-adornment'\r\n        className={clsx(classes.margin, classes.textField)}\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  scroll: {\r\n    overflowY: 'scroll',\r\n    border: 'solid black 5px',\r\n    height: '900px',\r\n  },\r\n}));\r\n\r\nconst Scroll = (props) => {\r\n  const classes = useStyles();\r\n  return <div className={classes.scroll}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CardList from './Components/Robots/CardList';\n// import { robots } from './Components/Robots/robots';\nimport SearchBox from './Components/SearchBox/SearchBox';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport Scroll from './Components/Scroll/scroll';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontFamily: 'SEGA LOGO FONT',\n    margin: theme.spacing(4),\n    padding: theme.spacing(4),\n    color: '#b3e5fc',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [state, setState] = useState({ robots: [] });\n  const [search, setSearch] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  const fetchMyRobots = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await res.json();\n    const robots = data;\n\n    setState({ robots: robots });\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchMyRobots();\n  }, []);\n\n  const onSearchChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const filteredRobots = state.robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(search.toLowerCase());\n  });\n\n  return (\n    <div className='App'>\n      <Typography variant='h1' className={classes.title} gutterBottom>\n        robofriends\n      </Typography>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        {!loading ? <CardList robots={filteredRobots} /> : <h1>Loading...</h1>}\n      </Scroll>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}